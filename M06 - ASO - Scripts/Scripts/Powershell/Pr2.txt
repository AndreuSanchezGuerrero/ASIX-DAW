Preparacions:
1. Crear un nou mòdul de PowerShell, anomenat ADPropi.psm1
2. Copiar la carpeta ADPropi a la carpeta de mòduls de PowerShell (C:\Windows\System32\WindowsPowerShell\v1.0\Modules)
3.Reiniciar PowerShell


contingut de ADPropi.psm1:

function Get-Usuaris {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Grup
    )
    $Usuaris = Get-ADGroupMember -Identity $Grup
    return $Usuaris
}

function Get-Alumnes {
    param(
        [Parameter(Mandatory=$false)]
        [ValidateSet("gESO1A","gESO1B","gESO2A","gESO2B","gESO3A","gESO3B","gASIX1A","gASIX1B","gASIX2A","gASIX2B","gASIX3A","gASIX3B")]
        [string]$Grup = "gAlumnes"
    )
    $Alumnes = Get-ADGroupMember -Identity $Grup
    $Alumnes | Sort-Object -Property Name | Select-Object Name, EmailAddress, TelephoneNumber
}

function New-Alumne {
    param(
        [Parameter(Mandatory=$true)]
        [string]$NomCompte,
        [Parameter(Mandatory=$true)]
        [string]$Nom,
        [Parameter(Mandatory=$true)]
        [string]$Cognoms,
        [Parameter(Mandatory=$true)]
        [ValidateSet("gESO1A","gESO1B","gESO2A","gESO2B","gESO3A","gESO3B","gASIX1A","gASIX1B","gASIX2A","gASIX2B","gASIX3A","gASIX3B")]
        [string]$Grup,
        [Parameter(Mandatory=$true)]
        [string]$Password,
        [Parameter(Mandatory=$false)]
        [string]$Descripcio = ""
    )
    $OU = $Grup.Substring(1, $Grup.Length - 1)
    $OU = $OU.Substring(0, $OU.Length - 1)
    $OU = "ou=" + $OU + ",ou=Alumnes,dc=XYZ,dc=net"
    $User = New-ADUser -Name $NomCompte -GivenName $Nom -Surname $Cognoms -SamAccountName $NomCompte -Path $OU -AccountPassword (ConvertTo-SecureString $Password -AsPlainText -Force) -Enabled $true -PasswordNeverExpires $true -Description $Descripcio
    Add-ADGroupMember -Identity $Grup -Members $User
}

function New-Profe {
    param(
        [Parameter(Mandatory=$true)]
        [string]$NomCompte,
        [Parameter(Mandatory=$true)]
        [string]$Nom,
        [Parameter(Mandatory=$true)]
        [string]$Cognoms,
        [Parameter(Mandatory=$true)]
        [ValidateSet("gASIX","gESO","gInformatica","gMatematica","gMusica","gEduFisica")]
        [string]$Departament,
        [Parameter(Mandatory=$true)]
        [string]$Email,
        [Parameter(Mandatory=$false)]
        [string]$Descripcio = ""
    )
    $OU = "ou=" + $Departament + ",ou=Professors,dc=XYZ,dc=net"
    $Password = [System.Web.Security.Membership]::GeneratePassword(8, 2)
    $User = New-ADUser -Name $NomCompte -GivenName $Nom -Surname $Cognoms -SamAccountName $NomCompte -Path $OU -AccountPassword (ConvertTo-SecureString $Password -AsPlainText -Force) -Enabled $true -PasswordNeverExpires $true -Description $Descripcio -EmailAddress $Email
    $SMTPServer = "smtp.XYZ.net"
    $SMTPPort = 25
    $SMTPFrom = "admin@smtp.XYZ.net"
    $SMTPTo = $Email
    $SMTPSubject = "Creació de compte"
    $SMTPBody = "Hola $Nom $Cognoms, la teva contrasenya és $Password"
    Send-MailMessage -From $SMTPFrom -To $SMTPTo -Subject $SMTPSubject -Body $SMTPBody -SmtpServer $SMTPServer -Port $SMTPPort
}

function Get-UsuariState {
    param(
        [Parameter(Mandatory=$true)]
        [string]$NomCompte
    )
    $User = Get-ADUser -Identity $NomCompte -Properties Enabled
    if ($User -eq $null) {
        $UserState = "Null" 
    } else {
        if ($User.Enabled -eq $true) {
            $UserState = "Enabled"
        } else {
            $UserState = "Disabled"
        }
    }
    return $UserState
}

function Create-Alumnes {
    param(
        [Parameter(Mandatory=$true)]
        [string]$RutaCSV
    )
    $CSV = Import-Csv $RutaCSV
    foreach ($Alumne in $CSV) {
        $UserState = Get-UsuariState -NomCompte $Alumne.NomCompte
        if ($UserState -eq "Enabled") {
            Write-Host "L'alumne $Alumne.NomCompte ja existeix i està actiu"
        } elseif ($UserState -eq "Disabled") {
            Enable-ADAccount -Identity $Alumne.NomCompte
            Write-Host "L'alumne $Alumne.NomCompte ja existeix i s'ha activat"
        } else {
            New-Alumne -NomCompte $Alumne.NomCompte -Nom $Alumne.Nom -Cognoms $Alumne.Cognoms -Grup $Alumne.Grup -Password $Alumne.Password -Descripcio $Alumne.Descripcio
            Write-Host "S'ha creat l'alumne $Alumne.NomCompte"
        }
    }
}

function Create-Professors {
    param(
        [Parameter(Mandatory=$true)]
        [string]$RutaCSV
    )
    $CSV = Import-Csv $RutaCSV
    foreach ($Profe in $CSV) {
        $UserState = Get-UsuariState -NomCompte $Profe.NomCompte
        if ($UserState -eq "Enabled") {
            Write-Host "El professor $Profe.NomCompte ja existeix i està actiu"
        } elseif ($UserState -eq "Disabled") {
            Enable-ADAccount -Identity $Profe.NomCompte
            Write-Host "El professor $Profe.NomCompte ja existeix i s'ha activat"
        } else {
            New-Profe -NomCompte $Profe.NomCompte -Nom $Profe.Nom -Cognoms $Profe.Cognoms -Departament $Profe.Departament -Email $Profe.Email -Descripcio $Profe.Descripcio
            Write-Host "S'ha creat el professor $Profe.NomCompte"
        }
    }
}

function Create-ProfessorsV2 {
    param(
        [Parameter(Mandatory=$true)]
        [string]$RutaCSV
    )
    $CSV = Import-Csv $RutaCSV
    foreach ($Profe in $CSV) {
        $UserState = Get-UsuariState -NomCompte $Profe.NomCompte
        if ($UserState -eq "Enabled") {
            Write-Host "El professor $Profe.NomCompte ja existeix i està actiu"
        } elseif ($UserState -eq "Disabled") {
            Enable-ADAccount -Identity $Profe.NomCompte
            Write-Host "El professor $Profe.NomCompte ja existeix i s'ha activat"
        } else {
            New-Profe -NomCompte $Profe.NomCompte -Nom $Profe.Nom -Cognoms $Profe.Cognoms -Departament $Profe.Departament -Email $Profe.Email -Descripcio $Profe.Descripcio
            Write-Host "S'ha creat el professor $Profe.NomCompte"
        }
    }
}
